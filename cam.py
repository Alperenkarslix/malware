#
#
#   !!!!!! TEST ALMAK İÇİN SERVERA ATILAN TÜM REQUEST KISIMLARINI COMMENT LINE YAPTIM
#   
#
#   !!!!!! ÇALIŞTIRMADAN ÖNCE triggers.json DOSYASINDAN İLGİLİ MODÜLÜN active DEĞERİNİ TRUE YAPIN
#
#
import cv2
import time
import os
from my_request import send_image
from read_config import read_triggers_json


def init_cam(): # init_cam fonksiyonu webcam'i başlatır.
    cap= cv2.VideoCapture(0)
    if not cap.isOpened():
        raise IOError("Cannot open webcam")
    return cap

def doomsday(cap): # doomsday fonksiyonu webcam'i kapatır.
    cap.release()
    cv2.destroyAllWindows()



def get_latest_image(yol): # get_latest_image fonksiyonu en son eklenen resmi alır.
    files = os.listdir(yol)
    files.sort(key=lambda x: os.path.getmtime(os.path.join(yol, x)))
    files.reverse()
    latest_file = files[0]
    return latest_file

def get_frame(path="captures",delay=1): # get_frame fonksiyonu bir kare alır.
    cap=init_cam()
    time.sleep(delay)
    frame= cap.read()
    frame = cv2.resize(frame, None, fx=1, fy=1, interpolation=cv2.INTER_AREA)
    cv2.imwrite(f'{path}/{time.strftime("%Y%m%d-%H%M%S")}.jpg', frame)
    doomsday(cap)

def get_frames(path="captures",max_images=500,delay=1): # get_frames fonksiyonu belirtilen süre kadar kare alır.
    cap=init_cam()
    time.sleep(delay)
    counter=0
    while True:
        ret,frame=cap.read()
        frame= cv2.resize(frame, None, fx=0.5, fy=0.5, interpolation=cv2.INTER_AREA)
        cv2.imwrite(f'{path}/{counter}-{time.strftime("%Y%m%d-%H%M%S")}.jpg', frame)
        # send_image(get_latest_image(path),path+"/")
        time.sleep(delay)
        counter+=1
        if counter== max_images:
            break
        c=cv2.waitKey(1)
        if c==27:
            break
    
    doomsday(cap)

def delete_images(path="captures"): # delete_images fonksiyonu belirtilen klasördeki tüm resimleri siler.
    for i in os.listdir(path):
        os.remove(f"{path}/{i}")

if read_triggers_json("cam")==True:
    get_frames(delay=0.1)
else:
    pass

